{"version":3,"sources":["webpack://web_project_4/./src/components/FormValidator.js","webpack://web_project_4/./src/components/Section.js","webpack://web_project_4/./src/components/Card.js","webpack://web_project_4/./src/components/Popup.js","webpack://web_project_4/./src/components/PoppupWithImage.js","webpack://web_project_4/./src/components/PopupWithForm.js","webpack://web_project_4/./src/pages/index.js","webpack://web_project_4/./src/components/initialCards.js"],"names":["FormValidator","settings","formElement","this","_inputSelector","inputSelector","_submitButtonSelector","submitButtonSelector","_inactiveButtonClass","inactiveButtonClass","_inputErrorClass","inputErrorClass","_errorClass","errorClass","_form","inputElement","errorElement","querySelector","id","textContent","validationMessage","classList","add","remove","validity","valid","_hideErrorMessage","_showErrorMessage","isValid","querySelectorAll","every","input","buttonElement","disabled","Array","from","forEach","addEventListener","_checkInputValidity","_toggleButtonState","e","preventDefault","_setEventListeners","Section","cssSelector","items","renderer","_items","_renderer","_cssSelector","item","append","prepend","imageModalPopup","document","popupPic","popupCaption","Card","template","data","handleCardClick","_link","link","_name","name","_template","_handleCardClick","cloneNode","setAttribute","_imageModal","openModal","target","closest","toggle","_cardLike","_cardLikeSelector","_cardTrash","_cardTrashSelector","_cardImage","_cardElement","_getCardTemplate","cardImage","cardTitle","Popup","popupSelector","_popupElement","_handleEscapeClose","bind","removeEventListener","which","close","contains","PopupWithImage","_popupLink","_popupName","src","PopupWithForm","popupSubmit","_popupSubmit","_formElement","_inputList","_inputValues","job","value","_getInputValues","reset","defaultConfig","formSelector","editModal","addModal","editForm","addForm","cardTemplate","content","list","addButton","createButton","editFormValidator","addFormValidator","enableValidation","imagePopup","setEventListeners","cardSection","cardInfo","open","createCard","addFormPopup"],"mappings":"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","file":"main.js","sourcesContent":["export default class FormValidator {\r\n    constructor(settings, formElement) {\r\n        this._inputSelector = settings.inputSelector;\r\n        this._submitButtonSelector = settings.submitButtonSelector;\r\n        this._inactiveButtonClass = settings.inactiveButtonClass;\r\n        this._inputErrorClass = settings.inputErrorClass;\r\n        this._errorClass = settings.errorClass;\r\n        this._form = formElement;\r\n    }\r\n\r\n\r\n    //Function to show error messages when validation criteria is not met\r\n    _showErrorMessage(inputElement) {\r\n        const errorElement = this._form.querySelector(\"#\" + inputElement.id + \"-error\");\r\n\r\n        errorElement.textContent = inputElement.validationMessage;\r\n\r\n        errorElement.classList.add(this._errorClass);\r\n        inputElement.classList.add(this._inputErrorClass);\r\n    }\r\n\r\n    //Function to hide the error messages when validation criteria is met\r\n    _hideErrorMessage(inputElement) {\r\n        const errorElement = this._form.querySelector(\"#\" + inputElement.id + \"-error\");\r\n\r\n        errorElement.textContent = \"\";\r\n        errorElement.classList.remove(this._errorClass);\r\n        inputElement.classList.remove(this._inputErrorClass);\r\n    }\r\n\r\n    //Function to check the input validity according to requirements\r\n    _checkInputValidity(inputElement, inputErrorClass) {\r\n        if(inputElement.validity.valid) {\r\n            //hide error message\r\n            this._hideErrorMessage(inputElement, inputErrorClass);\r\n        } else {\r\n            //show error message\r\n            this._showErrorMessage(inputElement, inputErrorClass);\r\n        }\r\n    }\r\n\r\n    //Function to change state of Save/Create buttons on form\r\n    _toggleButtonState(formElement, inputSelector) {\r\n        const inputs = [...formElement.querySelectorAll(inputSelector)];\r\n        const isValid = inputs.every(input => input.validity.valid);\r\n        const buttonElement = this._form.querySelector(this._submitButtonSelector);\r\n\r\n        if(isValid) {\r\n            buttonElement.classList.remove(this._inactiveButtonClass);\r\n            buttonElement.disabled = false;\r\n        } else {\r\n            buttonElement.classList.add(this._inactiveButtonClass);\r\n            buttonElement.disabled = true;\r\n        }\r\n    }\r\n\r\n  //event listeners set for card arrays\r\n    _setEventListeners() {\r\n        const inputs = Array.from(this._form.querySelectorAll(this._inputSelector));\r\n       //const buttonElement = this._form.querySelector(this._submitButtonSelector);\r\n        \r\n        inputs.forEach(inputElement => {\r\n            inputElement.addEventListener(\"input\", () => {\r\n                //check Input Validity\r\n                this._checkInputValidity(inputElement, this._inputErrorClass);\r\n                //toggle button state\r\n                this._toggleButtonState(this._form, this._inputSelector);\r\n                });\r\n           });\r\n        };\r\n\r\n  //enable validation of form submit buttons\r\n   enableValidation () {\r\n    this._form.addEventListener('submit', (e) => {\r\n       e.preventDefault();\r\n       });\r\n       \r\n    this._setEventListeners();    \r\n   };\r\n};","export default class Section {\r\n    constructor({items, renderer}, cssSelector) {\r\n        this._items = items;\r\n        this._renderer = renderer;\r\n        this._cssSelector = cssSelector;\r\n    }\r\n    renderer(){\r\n        this._items.forEach(item => {\r\n            this._cssSelector.append(this._renderer(item))\r\n        });\r\n//This is the original code used to render cards in index.js (before Section class creation)\r\n        // function initiateCardModule(cardInfo, insert){\r\n        //     const cardObject = new Card(cardInfo, cardTemplate);\r\n        //     const card = cardObject.createCard();\r\n        //     list[insert](card);\r\n        //   } \r\n        //   for(const initialCard of initialCards) initiateCardModule(initialCard, \"append\");\r\n    }\r\n    addItem(item){\r\n        //this._items.append(item);\r\n        this._cssSelector.prepend(this._renderer(item));\r\n    }\r\n}","//import {openModal} from \"../utils/utils.js\";\r\nconst imageModalPopup = document.querySelector('.popup_type_image');\r\nconst popupPic = imageModalPopup.querySelector('.popup__image');\r\nconst popupCaption = imageModalPopup.querySelector('.popup__caption');\r\n\r\n\r\nexport default class Card {\r\n    constructor ({data, handleCardClick}, template){\r\n        this._link = data.link;\r\n        this._name = data.name;\r\n        this._template = template;\r\n        this._handleCardClick = handleCardClick;\r\n    }\r\n\r\n    _getCardTemplate (){\r\n        return this._template.cloneNode(true);\r\n    }\r\n\r\n\r\n    _imageModal() { \r\n       popupPic.setAttribute('src', this._link); \r\n       popupPic.setAttribute('alt', this._name); \r\n       popupCaption.textContent = this._name; \r\n     } \r\n\r\n     _cardImageSelector(){\r\n         this._imageModal();\r\n         openModal(imageModalPopup);\r\n     }\r\n\r\n    _cardTrashSelector(e){\r\n        e.target.closest('.elements__element').remove(); \r\n    }\r\n\r\n    _cardLikeSelector(e){\r\n        e.target.classList.toggle('elements__favorite_selected'); \r\n    }\r\n\r\n    _setEventListeners() {\r\n        this._cardLike.addEventListener(\"click\", this._cardLikeSelector);\r\n        this._cardTrash.addEventListener(\"click\", this._cardTrashSelector);\r\n        this._cardImage.addEventListener(\"click\", () => this._handleCardClick(this._name, this._link));\r\n    }\r\n\r\n    createCard() { \r\n        this._cardElement = this._getCardTemplate();\r\n        const cardImage = this._cardElement.querySelector('.elements__element-pic');\r\n        const cardTitle = this._cardElement.querySelector('.elements__caption'); \r\n        this._cardImage = this._cardElement.querySelector('.elements__element-pic'); \r\n        this._cardLike = this._cardElement.querySelector('.elements__favorite'); \r\n        this._cardTrash = this._cardElement.querySelector('.elements__trash');\r\n            \r\n        cardTitle.textContent = this._name; \r\n        cardImage.setAttribute('src', this._link); \r\n        cardImage.setAttribute('alt', this._name); \r\n\r\n        this._setEventListeners();\r\n\r\n        return this._cardElement;\r\n    }\r\n}; ","// const addModal = document.querySelector('.popup_type_add-card');\r\n// const addForm = addModal.querySelector('.add-form');\r\n\r\nexport default class Popup {\r\n    constructor(popupSelector){\r\n        this._popupElement = document.querySelector(popupSelector);\r\n        this._handleEscapeClose = this._handleEscapeClose.bind(this);\r\n    }\r\n// //Toggle Functions \r\n// //Button Popup Toggle Function \r\n// function toggleModal(modal){ \r\n//     modal.classList.toggle('popup_open'); \r\n//   }  \r\n    open(){\r\n        this._popupElement.classList.add('popup_open');\r\n        document.addEventListener('keyup', this._handleEscapeClose);\r\n//Previous code to open modals on sprint 7\r\n//Open Modal Function\r\n//   function openModal(modal){\r\n//      toggleModal(modal);\r\n//      window.addEventListener('keydown', escKeyClose);\r\n//      modal.addEventListener('click', closePopup);\r\n//    }\r\n    }\r\n\r\n    close(){\r\n        this._popupElement.classList.remove('popup_open');\r\n        document.removeEventListener('keyup', this._handleEscapeClose);\r\n//   //Close Function\r\n//   function closePopup(e){\r\n//     if(e.target === this || e.target === this.querySelector('.popup__close-button')) {\r\n//       closeModal(this);\r\n//       addForm.reset();\r\n//     } \r\n//   }\r\n//   function closeModal(modal){\r\n//     toggleModal(modal);\r\n//     window.removeEventListener('keydown', escKeyClose);\r\n//     modal.removeEventListener('click', closePopup);\r\n//   }\r\n    }\r\n    _handleEscapeClose(e){\r\n        if(e.which == 27) {\r\n            this.close();\r\n        }\r\n    } \r\n//   //Escape key close functionality\r\n//   function escKeyClose(e){\r\n//     if(e.key === 'Escape'){\r\n//       closeModal(document.querySelector('.popup_open'));\r\n//       addForm.reset();\r\n//     }\r\n//   }\r\n    setEventListeners(){\r\n        this._popupElement.addEventListener('click', (e) => {\r\n            if(!e.target.classList.contains('popup') || e.target.classList.contains('popup__close-button')) {\r\n                this.close();\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// editButton.addEventListener('click',(e) => openModal(editModal));\r\n\r\n// //Edit Form Submit/Save Button Functionality\r\n// editForm.addEventListener('submit', (e) => {\r\n//   e.preventDefault();\r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   closeModal(editModal);\r\n// });\r\n// //Add Form Submit/Save Button Functionality\r\n// addForm.addEventListener('submit', (e)  => { \r\n//   e.preventDefault(); \r\n//   //create card: \r\n//   const newCard = {name: titleInput.value, link: linkInput.value};\r\n//   //initiateCardModule(newCard, \"prepend\");\r\n//   cardSection.addItem(newCard);\r\n\r\n//   //close modal after submit \r\n//   closeModal(addModal); \r\n//   addForm.reset(); \r\n//   });\r\n\r\n  \r\n  \r\n\r\n  \r\n\r\n\r\n","import Popup from \"./Popup.js\";\r\n\r\nexport default class PopupWithImage extends Popup {\r\n    constructor(popupSelector){\r\n        super(popupSelector);\r\n        this._popupLink = this._popupElement.querySelector('.popup__image');\r\n        this._popupName = this._popupElement.querySelector('.popup__caption');\r\n    }\r\n\r\n    open(link, name){\r\n        this._popupLink.src = link;\r\n        this._popupName.src = name;\r\n        super.open();\r\n// Previous Edit Form Submit/Save Button Functionality from Sprint 7\r\n// editForm.addEventListener('submit', (e) => {\r\n//   e.preventDefault();\r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   closeModal(editModal);\r\n// });\r\n    }\r\n}\r\n","import Popup from \"./Popup.js\";\r\n\r\n//class takes callback of form submission into constructor\r\nexport default class PopupWithForm extends Popup {\r\n    constructor({popupSelector, popupSubmit}){\r\n        super(popupSelector); //the 'add/edit FORMS' as this._popupElement (addForm or editForm)\r\n        this._popupSubmit = popupSubmit;\r\n        this._formElement = document.querySelector('.popup__form');\r\n    }\r\n\r\n    //private method, collects data from all input fields\r\n    _getInputValues(){\r\n        this._inputList = this._formElement.querySelector('.popup__input');\r\n        this._inputValues = {};\r\n        this._inputList.forEach(input => {\r\n            this._inputValues[input.name, input.job] = input.value;\r\n            return this._inputValues;\r\n        });\r\n    }\r\n\r\n    //modifies setEventListeners, adds click event listener\r\n    //to the close icon, while adding submit event handler\r\n    setEventListeners(){\r\n        this._formElement.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this._popupSubmit(this._getInputValues());\r\n            this.close();\r\n        })\r\n        super.setEventListeners();\r\n// Previous Edit Form Submit/Save Button Functionality from Sprint 7\r\n// editForm.addEventListener('submit', (e) => {\r\n//   e.preventDefault();\r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   closeModal(editModal);\r\n// });\r\n// //Add Form Submit/Save Button Functionality\r\n// addForm.addEventListener('submit', (e)  => { \r\n//   e.preventDefault(); \r\n//   //create card: \r\n//   const newCard = {name: titleInput.value, link: linkInput.value};\r\n//   //initiateCardModule(newCard, \"prepend\");\r\n//   cardSection.addItem(newCard);\r\n\r\n//   //close modal after submit \r\n//   closeModal(addModal); \r\n//   addForm.reset(); \r\n//   }); \r\n    }\r\n    //modifies close method to reset form once popup is closed\r\n    close(){\r\n        this._formElement.querySelector('.popup__form').reset();\r\n        super.close();\r\n    }\r\n}\r\n","import \"./index.css\";\r\nimport FormValidator from \"../components/FormValidator.js\";\r\nimport Section from \"../components/Section.js\";\r\nimport Card from \"../components/Card.js\";\r\nimport initialCards from \"../components/initialCards.js\";\r\n//import Popup from \"../components/Popup.js\";\r\nimport PopupWithImage from \"../components/PoppupWithImage\";\r\nimport PopupWithForm from \"../components/PopupWithForm\";\r\n//import {openModal, closeModal} from \"../utils/utils.js\";\r\n\r\n\r\nconst defaultConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__save\",\r\n  inactiveButtonClass: \"popup__save_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\n//Modals \r\nconst editModal= document.querySelector('.popup_type_edit'); \r\nconst addModal = document.querySelector('.popup_type_add-card'); \r\nconst editForm = editModal.querySelector('.edit-form'); \r\nconst addForm = addModal.querySelector('.add-form'); \r\n//const imageModal = document.querySelector('.popup_type_image'); \r\nconst cardTemplate = document.querySelector('.card__template').content;\r\nconst list = document.querySelector('.elements'); \r\n//Buttons and other DOM elements \r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst addButton = document.querySelector('.profile__add-button');\r\nconst createButton = addModal.querySelector('.popup__save');\r\n//const nameInput = document.querySelector('.popup__input_type_name'); \r\n//const jobInput = document.querySelector('.popup__input_type_job'); \r\n//const profileName = document.querySelector('.profile__info-title'); \r\n//const profileJob = document.querySelector('.profile__info-subtitle');  \r\n//const titleInput = addForm.querySelector('.popup__input_type_title'); \r\n//const linkInput = addForm.querySelector('.popup__input_type_link'); \r\n//const profileInfo = new UserInfo(profileName, profileJob);\r\n//call form validator class\r\nconst editFormValidator = new FormValidator(defaultConfig, editForm);\r\nconst addFormValidator = new FormValidator(defaultConfig, addForm);\r\n\r\neditFormValidator.enableValidation();\r\naddFormValidator.enableValidation();\r\n\r\n//initiate new Card modal \r\n// function initiateCardModule(cardInfo, insert){\r\n//   const cardObject = new Card(cardInfo, cardTemplate);\r\n//   const card = cardObject.createCard();\r\n//   list[insert](card);\r\n// }\r\n\r\n// for(const initialCard of initialCards) initiateCardModule(initialCard, \"append\");\r\n\r\n//Image Popup\r\nconst imagePopup = new PopupWithImage('.popup_type_image');\r\nimagePopup.setEventListeners();\r\n\r\n//call Section to render original cards to the 'elements' section of page\r\nconst cardSection = new Section({\r\n  items: initialCards,\r\n  renderer: (cardInfo) => {\r\n    return new Card({\r\n      data: cardInfo,\r\n      handleCardClick: (name, link) => {\r\n        imagePopup.open(name, link)\r\n      }\r\n    }, cardTemplate).createCard()\r\n  }\r\n}, list)\r\n\r\ncardSection.renderer();\r\n\r\n//Call new Popups for each type of form: image, add, edit,\r\n\r\n\r\n\r\n//Add Form\r\nconst addFormPopup = new PopupWithForm({\r\n  popupSelector: '.popup_type_add-card',\r\n  popupSubmit: (name, link) => {\r\n    cardSection(name, link)}\r\n  })\r\n\r\naddFormPopup.setEventListeners();\r\n\r\nconst cardFormSubmit = ([name,link]) => newSection([{name,link}]);\r\n\r\n////event listeners for click of modal add card button\r\naddButton.addEventListener('click', (e) => {\r\n  createButton.classList.add('popup__save_disabled');\r\n  createButton.disabled = true;\r\n  addFormPopup.open();\r\n });\r\n\r\n\r\n //Edit Title Form\r\n// const editFormPopup = newPopupWithForm({\r\n //  popupSelector: '.popup_type_edit',\r\n//   poupSubmit: () => profileInfo.setUserInfo(inputName.value, inputJob.value)\r\n //})\r\n//Modal Open Functions\r\n//Edit Modal Open Function\r\n// function editButtonOpen(){\r\n//   //update fields on main page \r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   //open modal\r\n//   openModal(editModal);\r\n// }\r\n//Image Modal Open Function\r\n//function imagePopupOpen(){\r\n // imageModal(card.link, card.name); \r\n // openModal(imagePopup);\r\n//}\r\n\r\n\r\n\r\n//editButton.addEventListener('click',(e) => openModal(editModal));\r\n\r\n// //Edit Form Submit/Save Button Functionality\r\n// editForm.addEventListener('submit', (e) => {\r\n//   e.preventDefault();\r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   closeModal(editModal);\r\n// });\r\n// //Add Form Submit/Save Button Functionality\r\n// addForm.addEventListener('submit', (e)  => { \r\n//   e.preventDefault(); \r\n//   //create card: \r\n//   const newCard = {name: titleInput.value, link: linkInput.value};\r\n//   //initiateCardModule(newCard, \"prepend\");\r\n//   cardSection.addItem(newCard);\r\n\r\n//   //close modal after submit \r\n//   closeModal(addModal); \r\n//   addForm.reset(); \r\n//   }); \r\n\r\n//export default {imagePopup}\r\n","//Cards to be loaded to browser upon opening\r\nconst initialCards = [\r\n    {\r\n      name: \"Yosemite Valley\",\r\n      link: \"https://code.s3.yandex.net/web-code/yosemite.jpg\"\r\n    },\r\n    {\r\n      name: \"Lake Louise\",\r\n      link: \"https://code.s3.yandex.net/web-code/lake-louise.jpg\"\r\n    },\r\n    {\r\n      name: \"Bald Mountains\",\r\n      link: \"https://code.s3.yandex.net/web-code/bald-mountains.jpg\"\r\n    },\r\n    {\r\n      name: \"Latemar\",\r\n      link: \"https://code.s3.yandex.net/web-code/latemar.jpg\"\r\n    },\r\n    {\r\n      name: \"Vanoise National Park\",\r\n      link: \"https://code.s3.yandex.net/web-code/vanoise.jpg\"\r\n    },\r\n    {\r\n      name: \"Lago di Braies\",\r\n      link: \"https://code.s3.yandex.net/web-code/lago.jpg\"\r\n    }\r\n  ]; \r\n\r\n  export default initialCards;\r\n"],"sourceRoot":""}