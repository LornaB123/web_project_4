{"version":3,"sources":["webpack://web_project_4/./src/FormValidator.js","webpack://web_project_4/./src/utils.js","webpack://web_project_4/./src/Card.js","webpack://web_project_4/./src/initialCards.js","webpack://web_project_4/./src/pages/index.js","webpack://web_project_4/./src/Section.js"],"names":["FormValidator","constructor","settings","formElement","this","_inputSelector","inputSelector","_submitButtonSelector","submitButtonSelector","_inactiveButtonClass","inactiveButtonClass","_inputErrorClass","inputErrorClass","_errorClass","errorClass","_form","_showErrorMessage","inputElement","errorElement","querySelector","id","textContent","validationMessage","classList","add","_hideErrorMessage","remove","_checkInputValidity","validity","valid","_toggleButtonState","isValid","querySelectorAll","every","input","buttonElement","disabled","_setEventListeners","Array","from","forEach","addEventListener","enableValidation","e","preventDefault","addForm","document","toggleModal","modal","toggle","openModal","window","escKeyClose","closePopup","target","closeModal","reset","key","removeEventListener","imagePopup","popupPic","popupCaption","Card","data","template","_link","link","_name","name","_template","_getCardTemplate","cloneNode","_imageModal","setAttribute","_cardImageSelector","_cardTrashSelector","closest","_cardLikeSelector","_cardLike","_cardTrash","_cardImage","bind","createCard","_cardElement","cardImage","cardTitle","defaultConfig","formSelector","editModal","addModal","editForm","cardTemplate","content","list","editFormValidator","addFormValidator","items","renderer","cssSelector","_items","_renderer","_cssSelector","item","addItems","cardInfo","editButton","addButton","createButton","nameInput","jobInput","profileName","profileJob","titleInput","linkInput","value","newCard","initiateCardModule"],"mappings":"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","file":"main.js","sourcesContent":["export default class FormValidator {\r\n    constructor(settings, formElement) {\r\n        this._inputSelector = settings.inputSelector;\r\n        this._submitButtonSelector = settings.submitButtonSelector;\r\n        this._inactiveButtonClass = settings.inactiveButtonClass;\r\n        this._inputErrorClass = settings.inputErrorClass;\r\n        this._errorClass = settings.errorClass;\r\n        this._form = formElement;\r\n    }\r\n\r\n\r\n    //Function to show error messages when validation criteria is not met\r\n    _showErrorMessage(inputElement) {\r\n        const errorElement = this._form.querySelector(\"#\" + inputElement.id + \"-error\");\r\n\r\n        errorElement.textContent = inputElement.validationMessage;\r\n\r\n        errorElement.classList.add(this._errorClass);\r\n        inputElement.classList.add(this._inputErrorClass);\r\n    }\r\n\r\n    //Function to hide the error messages when validation criteria is met\r\n    _hideErrorMessage(inputElement) {\r\n        const errorElement = this._form.querySelector(\"#\" + inputElement.id + \"-error\");\r\n\r\n        errorElement.textContent = \"\";\r\n        errorElement.classList.remove(this._errorClass);\r\n        inputElement.classList.remove(this._inputErrorClass);\r\n    }\r\n\r\n    //Function to check the input validity according to requirements\r\n    _checkInputValidity(inputElement, inputErrorClass) {\r\n        if(inputElement.validity.valid) {\r\n            //hide error message\r\n            this._hideErrorMessage(inputElement, inputErrorClass);\r\n        } else {\r\n            //show error message\r\n            this._showErrorMessage(inputElement, inputErrorClass);\r\n        }\r\n    }\r\n\r\n    //Function to change state of Save/Create buttons on form\r\n    _toggleButtonState(formElement, inputSelector) {\r\n        const inputs = [...formElement.querySelectorAll(inputSelector)];\r\n        const isValid = inputs.every(input => input.validity.valid);\r\n        const buttonElement = this._form.querySelector(this._submitButtonSelector);\r\n\r\n        if(isValid) {\r\n            buttonElement.classList.remove(this._inactiveButtonClass);\r\n            buttonElement.disabled = false;\r\n        } else {\r\n            buttonElement.classList.add(this._inactiveButtonClass);\r\n            buttonElement.disabled = true;\r\n        }\r\n    }\r\n\r\n  //event listeners set for card arrays\r\n    _setEventListeners() {\r\n        const inputs = Array.from(this._form.querySelectorAll(this._inputSelector));\r\n       //const buttonElement = this._form.querySelector(this._submitButtonSelector);\r\n        \r\n        inputs.forEach(inputElement => {\r\n            inputElement.addEventListener(\"input\", () => {\r\n                //check Input Validity\r\n                this._checkInputValidity(inputElement, this._inputErrorClass);\r\n                //toggle button state\r\n                this._toggleButtonState(this._form, this._inputSelector);\r\n                });\r\n           });\r\n        };\r\n\r\n  //enable validation of form submit buttons\r\n   enableValidation () {\r\n    this._form.addEventListener('submit', (e) => {\r\n       e.preventDefault();\r\n       });\r\n       \r\n    this._setEventListeners();    \r\n   };\r\n};","const addModal = document.querySelector('.popup_type_add-card');\r\nconst addForm = addModal.querySelector('.add-form');\r\n\r\n//Toggle Functions \r\n//Button Popup Toggle Function \r\nfunction toggleModal(modal){ \r\n    modal.classList.toggle('popup_open'); \r\n  }  \r\n  \r\n  //Open Modal Function\r\n  function openModal(modal){\r\n     toggleModal(modal);\r\n     window.addEventListener('keydown', escKeyClose);\r\n     modal.addEventListener('click', closePopup);\r\n   }\r\n  \r\n  //Close Function\r\n  function closePopup(e){\r\n    if(e.target === this || e.target === this.querySelector('.popup__close-button')) {\r\n      closeModal(this);\r\n      addForm.reset();\r\n    } \r\n  }\r\n  \r\n  //Escape key close functionality\r\n  function escKeyClose(e){\r\n    if(e.key === 'Escape'){\r\n      closeModal(document.querySelector('.popup_open'));\r\n      addForm.reset();\r\n    }\r\n  }\r\n  \r\n  function closeModal(modal){\r\n    toggleModal(modal);\r\n    window.removeEventListener('keydown', escKeyClose);\r\n    modal.removeEventListener('click', closePopup);\r\n  }\r\n\r\n\r\n  \r\n  export {openModal, closeModal};","import {openModal} from \"./utils.js\";\r\n\r\nconst imagePopup = document.querySelector('.popup_type_image');\r\nconst popupPic = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\n\r\nexport default class Card {\r\n    constructor (data, template){\r\n        this._link = data.link;\r\n        this._name = data.name;\r\n        this._template = template;\r\n    }\r\n\r\n    _getCardTemplate (){\r\n        return this._template.cloneNode(true);\r\n    }\r\n\r\n    _imageModal() { \r\n      popupPic.setAttribute('src', this._link); \r\n      popupPic.setAttribute('alt', this._name); \r\n      popupCaption.textContent = this._name; \r\n    } \r\n\r\n    _cardImageSelector(){\r\n        this._imageModal();\r\n        openModal(imagePopup);\r\n    }\r\n\r\n    _cardTrashSelector(e){\r\n        e.target.closest('.elements__element').remove(); \r\n    }\r\n\r\n    _cardLikeSelector(e){\r\n        e.target.classList.toggle('elements__favorite_selected'); \r\n    }\r\n\r\n    _setEventListeners() {\r\n        this._cardLike.addEventListener(\"click\", this._cardLikeSelector);\r\n        this._cardTrash.addEventListener(\"click\", this._cardTrashSelector);\r\n        this._cardImage.addEventListener(\"click\", this._cardImageSelector.bind(this));\r\n    }\r\n\r\n    createCard() { \r\n        this._cardElement = this._getCardTemplate();\r\n        const cardImage = this._cardElement.querySelector('.elements__element-pic');\r\n        const cardTitle = this._cardElement.querySelector('.elements__caption'); \r\n        this._cardImage = this._cardElement.querySelector('.elements__element-pic'); \r\n        this._cardLike = this._cardElement.querySelector('.elements__favorite'); \r\n        this._cardTrash = this._cardElement.querySelector('.elements__trash');\r\n            \r\n        cardTitle.textContent = this._name; \r\n        cardImage.setAttribute('src', this._link); \r\n        cardImage.setAttribute('alt', this._name); \r\n\r\n        this._setEventListeners();\r\n\r\n        return this._cardElement;\r\n    }\r\n}; ","//Cards to be loaded to browser upon opening\r\nconst initialCards = [\r\n    {\r\n      name: \"Yosemite Valley\",\r\n      link: \"https://code.s3.yandex.net/web-code/yosemite.jpg\"\r\n    },\r\n    {\r\n      name: \"Lake Louise\",\r\n      link: \"https://code.s3.yandex.net/web-code/lake-louise.jpg\"\r\n    },\r\n    {\r\n      name: \"Bald Mountains\",\r\n      link: \"https://code.s3.yandex.net/web-code/bald-mountains.jpg\"\r\n    },\r\n    {\r\n      name: \"Latemar\",\r\n      link: \"https://code.s3.yandex.net/web-code/latemar.jpg\"\r\n    },\r\n    {\r\n      name: \"Vanoise National Park\",\r\n      link: \"https://code.s3.yandex.net/web-code/vanoise.jpg\"\r\n    },\r\n    {\r\n      name: \"Lago di Braies\",\r\n      link: \"https://code.s3.yandex.net/web-code/lago.jpg\"\r\n    }\r\n  ]; \r\n\r\n  export default initialCards;\r\n","import FormValidator from \"../FormValidator.js\";\r\nimport Card from \"../Card.js\";\r\nimport initialCards from \"../initialCards.js\";\r\nimport {openModal, closeModal} from \"../utils.js\";\r\nimport Section from \"../Section.js\";\r\n\r\nconst defaultConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__save\",\r\n  inactiveButtonClass: \"popup__save_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\n//Modals \r\nconst editModal= document.querySelector('.popup_type_edit'); \r\nconst addModal = document.querySelector('.popup_type_add-card'); \r\nconst editForm = editModal.querySelector('.edit-form'); \r\nconst addForm = addModal.querySelector('.add-form'); \r\nconst imagePopup = document.querySelector('.popup_type_image'); \r\nconst cardTemplate = document.querySelector('.card__template').content;\r\nconst list = document.querySelector('.elements'); \r\n\r\n//call form validator class\r\nconst editFormValidator = new FormValidator(defaultConfig, editForm);\r\nconst addFormValidator = new FormValidator(defaultConfig, addForm);\r\n\r\neditFormValidator.enableValidation();\r\naddFormValidator.enableValidation();\r\n\r\n//initiate new Card modal \r\n// function initiateCardModule(cardInfo, insert){\r\n//   const cardObject = new Card(cardInfo, cardTemplate);\r\n//   const card = cardObject.createCard();\r\n//   list[insert](card);\r\n// }\r\n\r\n// for(const initialCard of initialCards) initiateCardModule(initialCard, \"append\");\r\n\r\n\r\n//call Section\r\nnew Section(\r\n  {items: initialCards,\r\n  renderer: (cardInfo) => new Card({\r\n      data: cardInfo,\r\n      template: cardTemplate\r\n    }).createCard()\r\n  }\r\n  , list).renderer();\r\n\r\n\r\n//Buttons and other DOM elements \r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst addButton = document.querySelector('.profile__add-button');\r\nconst createButton = addModal.querySelector('.popup__save');\r\nconst nameInput = document.querySelector('.popup__input_type_name'); \r\nconst jobInput = document.querySelector('.popup__input_type_job'); \r\nconst profileName = document.querySelector('.profile__info-title'); \r\nconst profileJob = document.querySelector('.profile__info-subtitle');  \r\nconst titleInput = addForm.querySelector('.popup__input_type_title'); \r\nconst linkInput = addForm.querySelector('.popup__input_type_link'); \r\n\r\n\r\n//Modal Open Functions\r\n//Edit Modal Open Function\r\nfunction editButtonOpen(){\r\n  //update fields on main page \r\n  profileName.textContent = nameInput.value; \r\n  profileJob.textContent = jobInput.value;\r\n  //open modal\r\n  openModal(editModal);\r\n}\r\n//Image Modal Open Function\r\nfunction imagePopupOpen(){\r\n  imageModal(card.link, card.name); \r\n  openModal(imagePopup);\r\n}\r\n\r\n//event listeners for click of modal open buttons\r\naddButton.addEventListener('click', (e) => {\r\n  createButton.classList.add('popup__save_disabled');\r\n  createButton.disabled = true;\r\n  openModal(addModal);\r\n});\r\n\r\neditButton.addEventListener('click',(e) => openModal(editModal));\r\n\r\n//Edit Form Submit/Save Button Functionality\r\neditForm.addEventListener('submit', (e) => {\r\n  e.preventDefault();\r\n  profileName.textContent = nameInput.value; \r\n  profileJob.textContent = jobInput.value;\r\n  closeModal(editModal);\r\n});\r\n//Add Form Submit/Save Button Functionality\r\naddForm.addEventListener('submit', (e)  => { \r\n  e.preventDefault(); \r\n  //create card: \r\n  const newCard = {name: titleInput.value, link: linkInput.value};\r\n  initiateCardModule(newCard, \"prepend\");\r\n\r\n  //close modal after submit \r\n  closeModal(addModal); \r\n  addForm.reset(); \r\n  }); \r\n","export default class Section {\r\n    constructor({items, renderer}, cssSelector) {\r\n        this._items = items;\r\n        this._renderer = renderer;\r\n        this._cssSelector = cssSelector;\r\n    }\r\n\r\n    renderer(){\r\n        this._items.forEach(item => {\r\n            this._renderer(item)\r\n        });\r\n//This is the original code used to render cards in index.js (before Section class creation)\r\n        // function initiateCardModule(cardInfo, insert){\r\n        //     const cardObject = new Card(cardInfo, cardTemplate);\r\n        //     const card = cardObject.createCard();\r\n        //     list[insert](card);\r\n        //   }\r\n          \r\n        //   for(const initialCard of initialCards) initiateCardModule(initialCard, \"append\");\r\n    }\r\n\r\n    addItems(){\r\n\r\n    }\r\n}"],"sourceRoot":""}