{"version":3,"sources":["webpack://web_project_4/./src/utils/utils.js","webpack://web_project_4/webpack/bootstrap","webpack://web_project_4/./src/components/FormValidator.js","webpack://web_project_4/./src/components/Section.js","webpack://web_project_4/./src/components/Card.js","webpack://web_project_4/./src/components/Popup.js","webpack://web_project_4/./src/components/PoppupWithImage.js","webpack://web_project_4/./src/components/PopupWithForm.js","webpack://web_project_4/./src/pages/index.js","webpack://web_project_4/./src/utils/initialCards.js"],"names":["document","querySelector","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","FormValidator","settings","formElement","this","_inputSelector","inputSelector","_submitButtonSelector","submitButtonSelector","_inactiveButtonClass","inactiveButtonClass","_inputErrorClass","inputErrorClass","_errorClass","errorClass","_form","inputElement","errorElement","id","textContent","validationMessage","classList","add","remove","validity","valid","_hideErrorMessage","_showErrorMessage","isValid","querySelectorAll","every","input","buttonElement","disabled","Array","from","forEach","addEventListener","_checkInputValidity","_toggleButtonState","e","preventDefault","_setEventListeners","Section","cssSelector","items","renderer","console","log","arguments","_items","_renderer","_cssSelector","item","append","prepend","imagePopup","popupPic","popupCaption","Card","data","template","_link","link","_name","name","_template","cloneNode","setAttribute","_imageModal","openModal","target","closest","toggle","_cardLike","_cardLikeSelector","_cardTrash","_cardTrashSelector","_cardImage","_cardImageSelector","bind","_cardElement","_getCardTemplate","cardImage","cardTitle","Popup","popupSelector","_popupElement","_handleEscapeClose","removeEventListener","which","close","contains","PopupWithImage","caption","src","PopupWithForm","popupSubmit","_popupSubmit","_formElement","_inputList","_inputValues","job","value","_getInputValues","reset","defaultConfig","formSelector","editModal","addModal","editForm","addForm","imageModal","cardTemplate","content","list","addButton","createButton","editFormValidator","addFormValidator","enableValidation","cardSection","cardInfo","createCard","setEventListeners","addFormPopup","open"],"mappings":"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","file":"main.js","sourcesContent":["const addModal = document.querySelector('.popup_type_add-card');\r\nconst addForm = addModal.querySelector('.add-form');\r\n\r\n//Toggle Functions \r\n//Button Popup Toggle Function \r\nfunction toggleModal(modal){ \r\n    modal.classList.toggle('popup_open'); \r\n  }  \r\n  \r\n  // //Open Modal Function\r\n  // function openModal(modal){\r\n  //    toggleModal(modal);\r\n  //    window.addEventListener('keydown', escKeyClose);\r\n  //    modal.addEventListener('click', closePopup);\r\n  //  }\r\n  \r\n  // //Close Function\r\n  // function closePopup(e){\r\n  //   if(e.target === this || e.target === this.querySelector('.popup__close-button')) {\r\n  //     closeModal(this);\r\n  //     addForm.reset();\r\n  //   } \r\n  // }\r\n  \r\n  // //Escape key close functionality\r\n  // function escKeyClose(e){\r\n  //   if(e.key === 'Escape'){\r\n  //     closeModal(document.querySelector('.popup_open'));\r\n  //     addForm.reset();\r\n  //   }\r\n  // }\r\n  \r\n  function closeModal(modal){\r\n    toggleModal(modal);\r\n    window.removeEventListener('keydown', escKeyClose);\r\n    modal.removeEventListener('click', closePopup);\r\n  }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export default class FormValidator {\r\n    constructor(settings, formElement) {\r\n        this._inputSelector = settings.inputSelector;\r\n        this._submitButtonSelector = settings.submitButtonSelector;\r\n        this._inactiveButtonClass = settings.inactiveButtonClass;\r\n        this._inputErrorClass = settings.inputErrorClass;\r\n        this._errorClass = settings.errorClass;\r\n        this._form = formElement;\r\n    }\r\n\r\n\r\n    //Function to show error messages when validation criteria is not met\r\n    _showErrorMessage(inputElement) {\r\n        const errorElement = this._form.querySelector(\"#\" + inputElement.id + \"-error\");\r\n\r\n        errorElement.textContent = inputElement.validationMessage;\r\n\r\n        errorElement.classList.add(this._errorClass);\r\n        inputElement.classList.add(this._inputErrorClass);\r\n    }\r\n\r\n    //Function to hide the error messages when validation criteria is met\r\n    _hideErrorMessage(inputElement) {\r\n        const errorElement = this._form.querySelector(\"#\" + inputElement.id + \"-error\");\r\n\r\n        errorElement.textContent = \"\";\r\n        errorElement.classList.remove(this._errorClass);\r\n        inputElement.classList.remove(this._inputErrorClass);\r\n    }\r\n\r\n    //Function to check the input validity according to requirements\r\n    _checkInputValidity(inputElement, inputErrorClass) {\r\n        if(inputElement.validity.valid) {\r\n            //hide error message\r\n            this._hideErrorMessage(inputElement, inputErrorClass);\r\n        } else {\r\n            //show error message\r\n            this._showErrorMessage(inputElement, inputErrorClass);\r\n        }\r\n    }\r\n\r\n    //Function to change state of Save/Create buttons on form\r\n    _toggleButtonState(formElement, inputSelector) {\r\n        const inputs = [...formElement.querySelectorAll(inputSelector)];\r\n        const isValid = inputs.every(input => input.validity.valid);\r\n        const buttonElement = this._form.querySelector(this._submitButtonSelector);\r\n\r\n        if(isValid) {\r\n            buttonElement.classList.remove(this._inactiveButtonClass);\r\n            buttonElement.disabled = false;\r\n        } else {\r\n            buttonElement.classList.add(this._inactiveButtonClass);\r\n            buttonElement.disabled = true;\r\n        }\r\n    }\r\n\r\n  //event listeners set for card arrays\r\n    _setEventListeners() {\r\n        const inputs = Array.from(this._form.querySelectorAll(this._inputSelector));\r\n       //const buttonElement = this._form.querySelector(this._submitButtonSelector);\r\n        \r\n        inputs.forEach(inputElement => {\r\n            inputElement.addEventListener(\"input\", () => {\r\n                //check Input Validity\r\n                this._checkInputValidity(inputElement, this._inputErrorClass);\r\n                //toggle button state\r\n                this._toggleButtonState(this._form, this._inputSelector);\r\n                });\r\n           });\r\n        };\r\n\r\n  //enable validation of form submit buttons\r\n   enableValidation () {\r\n    this._form.addEventListener('submit', (e) => {\r\n       e.preventDefault();\r\n       });\r\n       \r\n    this._setEventListeners();    \r\n   };\r\n};","export default class Section {\r\n    constructor({items, renderer}, cssSelector) {\r\n        console.log(arguments);\r\n        this._items = items;\r\n        this._renderer = renderer;\r\n        this._cssSelector = cssSelector;\r\n    }\r\n\r\n    renderer(){\r\n        this._items.forEach(item => {\r\n            this._cssSelector.append(this._renderer(item))\r\n        });\r\n//This is the original code used to render cards in index.js (before Section class creation)\r\n        // function initiateCardModule(cardInfo, insert){\r\n        //     const cardObject = new Card(cardInfo, cardTemplate);\r\n        //     const card = cardObject.createCard();\r\n        //     list[insert](card);\r\n        //   }\r\n          \r\n        //   for(const initialCard of initialCards) initiateCardModule(initialCard, \"append\");\r\n    }\r\n\r\n    addItem(item){\r\n        //this._items.append(item);\r\n        this._cssSelector.prepend(this._renderer(item));\r\n    }\r\n}","import {openModal} from \"../utils/utils.js\";\r\n\r\nconst imagePopup = document.querySelector('.popup_type_image');\r\nconst popupPic = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\n\r\nexport default class Card {\r\n    constructor ({data, template}){\r\n        console.log(arguments);\r\n        this._link = data.link;\r\n        this._name = data.name;\r\n        this._template = template;\r\n    }\r\n\r\n    _getCardTemplate (){\r\n        return this._template.cloneNode(true);\r\n    }\r\n\r\n    _imageModal() { \r\n      popupPic.setAttribute('src', this._link); \r\n      popupPic.setAttribute('alt', this._name); \r\n      popupCaption.textContent = this._name; \r\n    } \r\n\r\n    _cardImageSelector(){\r\n        this._imageModal();\r\n        openModal(imagePopup);\r\n    }\r\n\r\n    _cardTrashSelector(e){\r\n        e.target.closest('.elements__element').remove(); \r\n    }\r\n\r\n    _cardLikeSelector(e){\r\n        e.target.classList.toggle('elements__favorite_selected'); \r\n    }\r\n\r\n    _setEventListeners() {\r\n        this._cardLike.addEventListener(\"click\", this._cardLikeSelector);\r\n        this._cardTrash.addEventListener(\"click\", this._cardTrashSelector);\r\n        this._cardImage.addEventListener(\"click\", this._cardImageSelector.bind(this));\r\n    }\r\n\r\n    createCard() { \r\n        this._cardElement = this._getCardTemplate();\r\n        const cardImage = this._cardElement.querySelector('.elements__element-pic');\r\n        const cardTitle = this._cardElement.querySelector('.elements__caption'); \r\n        this._cardImage = this._cardElement.querySelector('.elements__element-pic'); \r\n        this._cardLike = this._cardElement.querySelector('.elements__favorite'); \r\n        this._cardTrash = this._cardElement.querySelector('.elements__trash');\r\n            \r\n        cardTitle.textContent = this._name; \r\n        cardImage.setAttribute('src', this._link); \r\n        cardImage.setAttribute('alt', this._name); \r\n\r\n        this._setEventListeners();\r\n\r\n        return this._cardElement;\r\n    }\r\n}; ","// const addModal = document.querySelector('.popup_type_add-card');\r\n// const addForm = addModal.querySelector('.add-form');\r\n\r\nexport default class Popup {\r\n    constructor(popupSelector){\r\n        this._popupElement = document.querySelector(popupSelector);\r\n        this._handleEscapeClose = this._handleEscapeClose.bind(this);\r\n    }\r\n// //Toggle Functions \r\n// //Button Popup Toggle Function \r\n// function toggleModal(modal){ \r\n//     modal.classList.toggle('popup_open'); \r\n//   }  \r\n    open(){\r\n        this._popupElement.classList.add('popup_open');\r\n        document.addEventListener('keyup', this._handleEscapeClose)\r\n//Previous code to open modals on sprint 7\r\n//Open Modal Function\r\n//   function openModal(modal){\r\n//      toggleModal(modal);\r\n//      window.addEventListener('keydown', escKeyClose);\r\n//      modal.addEventListener('click', closePopup);\r\n//    }\r\n    }\r\n\r\n    close(){\r\n        this._popupElement.classList.remove('popup_open');\r\n        document.removeEventListener('keyup', this._handleEscapeClose)\r\n//   //Close Function\r\n//   function closePopup(e){\r\n//     if(e.target === this || e.target === this.querySelector('.popup__close-button')) {\r\n//       closeModal(this);\r\n//       addForm.reset();\r\n//     } \r\n//   }\r\n//   function closeModal(modal){\r\n//     toggleModal(modal);\r\n//     window.removeEventListener('keydown', escKeyClose);\r\n//     modal.removeEventListener('click', closePopup);\r\n//   }\r\n    }\r\n\r\n    _handleEscapeClose(e){\r\n        if(e.which == 27) {\r\n            this.close();\r\n        }\r\n    }\r\n  \r\n//   //Escape key close functionality\r\n//   function escKeyClose(e){\r\n//     if(e.key === 'Escape'){\r\n//       closeModal(document.querySelector('.popup_open'));\r\n//       addForm.reset();\r\n//     }\r\n//   }\r\n    setEventListeners(){\r\n        this._popupElement.addEventListener('click', (e) => {\r\n            if(!e.target.classList.contains('popup') || e.target.classList.contains('popup__close-button')) {\r\n                this.close();\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// editButton.addEventListener('click',(e) => openModal(editModal));\r\n\r\n// //Edit Form Submit/Save Button Functionality\r\n// editForm.addEventListener('submit', (e) => {\r\n//   e.preventDefault();\r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   closeModal(editModal);\r\n// });\r\n// //Add Form Submit/Save Button Functionality\r\n// addForm.addEventListener('submit', (e)  => { \r\n//   e.preventDefault(); \r\n//   //create card: \r\n//   const newCard = {name: titleInput.value, link: linkInput.value};\r\n//   //initiateCardModule(newCard, \"prepend\");\r\n//   cardSection.addItem(newCard);\r\n\r\n//   //close modal after submit \r\n//   closeModal(addModal); \r\n//   addForm.reset(); \r\n//   });\r\n\r\n  \r\n  \r\n\r\n  \r\n\r\n\r\n","import Popup from \"./Popup.js\";\r\n\r\nexport default class PopupWithImage extends Popup {\r\n    constructor(popupSelector){\r\n        super(popupSelector);\r\n    }\r\n\r\n    open(link, caption){\r\n        this._popupElement.querySelector('.popup__image').src = link;\r\n        this._popupElement.querySelector('.popup__caption').src = caption;\r\n        super.open();\r\n// Previous Edit Form Submit/Save Button Functionality from Sprint 7\r\n// editForm.addEventListener('submit', (e) => {\r\n//   e.preventDefault();\r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   closeModal(editModal);\r\n// });\r\n    }\r\n}\r\n","import Popup from \"./Popup.js\";\r\n\r\n//class takes callback of form submission into constructor\r\nexport default class PopupWithForm extends Popup {\r\n    constructor(popupSelector, popupSubmit){\r\n        super(popupSelector); //the 'add/edit FORMS' as this._popupElement (addForm or editForm)\r\n        this._popupSubmit = popupSubmit;\r\n        this._formElement = document.querySelector('.popup__form');\r\n    }\r\n\r\n    //private method, collects data from all input fields\r\n    _getInputValues(){\r\n        this._inputList = this._formElement.querySelector('.popup__input');\r\n        this._inputValues = {};\r\n        this._inputList.forEach(input => {\r\n            this._inputValues[input.name, input.job] = input.value;\r\n            return this._inputValues;\r\n        });\r\n    }\r\n\r\n    //modifies setEventListeners, adds click event listener\r\n    //to the close icon, while adding submit event handler\r\n    setEventListeners(){\r\n        this._formElement.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this._popupSubmit(this._getInputValues());\r\n            this.close();\r\n        })\r\n        super.setEventListeners();\r\n// Previous Edit Form Submit/Save Button Functionality from Sprint 7\r\n// editForm.addEventListener('submit', (e) => {\r\n//   e.preventDefault();\r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   closeModal(editModal);\r\n// });\r\n// //Add Form Submit/Save Button Functionality\r\n// addForm.addEventListener('submit', (e)  => { \r\n//   e.preventDefault(); \r\n//   //create card: \r\n//   const newCard = {name: titleInput.value, link: linkInput.value};\r\n//   //initiateCardModule(newCard, \"prepend\");\r\n//   cardSection.addItem(newCard);\r\n\r\n//   //close modal after submit \r\n//   closeModal(addModal); \r\n//   addForm.reset(); \r\n//   }); \r\n    }\r\n    //modifies close method to reset form once popup is closed\r\n    close(){\r\n        this._formElement.querySelector('.popup__form').reset();\r\n        super.close();\r\n    }\r\n}\r\n","import \"./index.css\";\r\nimport FormValidator from \"../components/FormValidator.js\";\r\nimport Section from \"../components/Section.js\";\r\nimport Card from \"../components/Card.js\";\r\nimport initialCards from \"../utils/initialCards.js\";\r\nimport Popup from \"../components/Popup.js\";\r\nimport PopupWithImage from \"../components/PoppupWithImage\";\r\nimport PopupWithForm from \"../components/PopupWithForm\";\r\n//import {openModal, closeModal} from \"../utils/utils.js\";\r\n\r\n\r\nconst defaultConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__save\",\r\n  inactiveButtonClass: \"popup__save_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\n//Modals \r\nconst editModal= document.querySelector('.popup_type_edit'); \r\nconst addModal = document.querySelector('.popup_type_add-card'); \r\nconst editForm = editModal.querySelector('.edit-form'); \r\nconst addForm = addModal.querySelector('.add-form'); \r\nconst imageModal = document.querySelector('.popup_type_image'); \r\nconst cardTemplate = document.querySelector('.card__template').content;\r\nconst list = document.querySelector('.elements'); \r\n//Buttons and other DOM elements \r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst addButton = document.querySelector('.profile__add-button');\r\nconst createButton = addModal.querySelector('.popup__save');\r\nconst nameInput = document.querySelector('.popup__input_type_name'); \r\nconst jobInput = document.querySelector('.popup__input_type_job'); \r\nconst profileName = document.querySelector('.profile__info-title'); \r\nconst profileJob = document.querySelector('.profile__info-subtitle');  \r\nconst titleInput = addForm.querySelector('.popup__input_type_title'); \r\nconst linkInput = addForm.querySelector('.popup__input_type_link'); \r\n//const profileInfo = new UserInfo(profileName, profileJob);\r\n//call form validator class\r\nconst editFormValidator = new FormValidator(defaultConfig, editForm);\r\nconst addFormValidator = new FormValidator(defaultConfig, addForm);\r\n\r\neditFormValidator.enableValidation();\r\naddFormValidator.enableValidation();\r\n\r\n//initiate new Card modal \r\n// function initiateCardModule(cardInfo, insert){\r\n//   const cardObject = new Card(cardInfo, cardTemplate);\r\n//   const card = cardObject.createCard();\r\n//   list[insert](card);\r\n// }\r\n\r\n// for(const initialCard of initialCards) initiateCardModule(initialCard, \"append\");\r\n\r\n\r\n//call Section to render original cards to the 'elements' section of page\r\nconst cardSection = new Section({\r\n  items: initialCards,\r\n  renderer: (cardInfo) => {\r\n    return new Card({\r\n      data: cardInfo,\r\n      template: cardTemplate,\r\n    }).createCard()\r\n  },\r\n},\r\nlist\r\n)\r\n\r\ncardSection.renderer();\r\n\r\n//Call new Popups for each type of form: image, add, edit,\r\n\r\n//Image Popup\r\nconst imagePopup = new PopupWithImage(imageModal);\r\nimagePopup.setEventListeners();\r\n\r\n//Add Form\r\nconst addFormPopup = new PopupWithForm({\r\n  popupSelector: addModal,\r\n  popupSubmit: (data) => cardSection(data)\r\n})\r\n\r\naddFormPopup.setEventListeners();\r\n\r\n////event listeners for click of modal add card button\r\naddButton.addEventListener('click', (e) => {\r\n  createButton.classList.add('popup__save_disabled');\r\n  createButton.disabled = true;\r\n  addFormPopup.open();\r\n });\r\n\r\n\r\n //Edit Title Form\r\n// const editFormPopup = newPopupWithForm({\r\n //  popupSelector: editModal,\r\n//   poupSubmit: () => profileInfo.setUserInfo(inputName.value, inputJob.value)\r\n //})\r\n//Modal Open Functions\r\n//Edit Modal Open Function\r\n// function editButtonOpen(){\r\n//   //update fields on main page \r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   //open modal\r\n//   openModal(editModal);\r\n// }\r\n//Image Modal Open Function\r\n//function imagePopupOpen(){\r\n // imageModal(card.link, card.name); \r\n // openModal(imagePopup);\r\n//}\r\n\r\n\r\n\r\n//editButton.addEventListener('click',(e) => openModal(editModal));\r\n\r\n// //Edit Form Submit/Save Button Functionality\r\n// editForm.addEventListener('submit', (e) => {\r\n//   e.preventDefault();\r\n//   profileName.textContent = nameInput.value; \r\n//   profileJob.textContent = jobInput.value;\r\n//   closeModal(editModal);\r\n// });\r\n// //Add Form Submit/Save Button Functionality\r\n// addForm.addEventListener('submit', (e)  => { \r\n//   e.preventDefault(); \r\n//   //create card: \r\n//   const newCard = {name: titleInput.value, link: linkInput.value};\r\n//   //initiateCardModule(newCard, \"prepend\");\r\n//   cardSection.addItem(newCard);\r\n\r\n//   //close modal after submit \r\n//   closeModal(addModal); \r\n//   addForm.reset(); \r\n//   }); \r\n","//Cards to be loaded to browser upon opening\r\nconst initialCards = [\r\n    {\r\n      name: \"Yosemite Valley\",\r\n      link: \"https://code.s3.yandex.net/web-code/yosemite.jpg\"\r\n    },\r\n    {\r\n      name: \"Lake Louise\",\r\n      link: \"https://code.s3.yandex.net/web-code/lake-louise.jpg\"\r\n    },\r\n    {\r\n      name: \"Bald Mountains\",\r\n      link: \"https://code.s3.yandex.net/web-code/bald-mountains.jpg\"\r\n    },\r\n    {\r\n      name: \"Latemar\",\r\n      link: \"https://code.s3.yandex.net/web-code/latemar.jpg\"\r\n    },\r\n    {\r\n      name: \"Vanoise National Park\",\r\n      link: \"https://code.s3.yandex.net/web-code/vanoise.jpg\"\r\n    },\r\n    {\r\n      name: \"Lago di Braies\",\r\n      link: \"https://code.s3.yandex.net/web-code/lago.jpg\"\r\n    }\r\n  ]; \r\n\r\n  export default initialCards;\r\n"],"sourceRoot":""}