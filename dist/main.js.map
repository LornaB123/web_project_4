{"version":3,"sources":["webpack://web_project_4/./src/components/FormValidator.js","webpack://web_project_4/./src/components/Section.js","webpack://web_project_4/./src/utils/utils.js","webpack://web_project_4/./src/components/Card.js","webpack://web_project_4/./src/pages/index.js","webpack://web_project_4/./src/utils/initialCards.js"],"names":["FormValidator","settings","formElement","this","_inputSelector","inputSelector","_submitButtonSelector","submitButtonSelector","_inactiveButtonClass","inactiveButtonClass","_inputErrorClass","inputErrorClass","_errorClass","errorClass","_form","inputElement","errorElement","querySelector","id","textContent","validationMessage","classList","add","remove","validity","valid","_hideErrorMessage","_showErrorMessage","isValid","querySelectorAll","every","input","buttonElement","disabled","Array","from","forEach","addEventListener","_checkInputValidity","_toggleButtonState","e","preventDefault","_setEventListeners","Section","cssSelector","items","renderer","_items","_renderer","_cssSelector","item","addForm","document","toggleModal","modal","toggle","openModal","window","escKeyClose","closePopup","target","closeModal","reset","key","removeEventListener","imagePopup","popupPic","popupCaption","Card","data","template","_link","link","_name","name","_template","cloneNode","setAttribute","_imageModal","closest","_cardLike","_cardLikeSelector","_cardTrash","_cardTrashSelector","_cardImage","_cardImageSelector","bind","_cardElement","_getCardTemplate","cardImage","cardTitle","defaultConfig","formSelector","editModal","addModal","editForm","cardTemplate","content","list","editFormValidator","addFormValidator","enableValidation","cardInfo","createCard","editButton","addButton","createButton","nameInput","jobInput","profileName","profileJob","titleInput","linkInput","value","newCard","initiateCardModule"],"mappings":"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","file":"main.js","sourcesContent":["export default class FormValidator {\r\n    constructor(settings, formElement) {\r\n        this._inputSelector = settings.inputSelector;\r\n        this._submitButtonSelector = settings.submitButtonSelector;\r\n        this._inactiveButtonClass = settings.inactiveButtonClass;\r\n        this._inputErrorClass = settings.inputErrorClass;\r\n        this._errorClass = settings.errorClass;\r\n        this._form = formElement;\r\n    }\r\n\r\n\r\n    //Function to show error messages when validation criteria is not met\r\n    _showErrorMessage(inputElement) {\r\n        const errorElement = this._form.querySelector(\"#\" + inputElement.id + \"-error\");\r\n\r\n        errorElement.textContent = inputElement.validationMessage;\r\n\r\n        errorElement.classList.add(this._errorClass);\r\n        inputElement.classList.add(this._inputErrorClass);\r\n    }\r\n\r\n    //Function to hide the error messages when validation criteria is met\r\n    _hideErrorMessage(inputElement) {\r\n        const errorElement = this._form.querySelector(\"#\" + inputElement.id + \"-error\");\r\n\r\n        errorElement.textContent = \"\";\r\n        errorElement.classList.remove(this._errorClass);\r\n        inputElement.classList.remove(this._inputErrorClass);\r\n    }\r\n\r\n    //Function to check the input validity according to requirements\r\n    _checkInputValidity(inputElement, inputErrorClass) {\r\n        if(inputElement.validity.valid) {\r\n            //hide error message\r\n            this._hideErrorMessage(inputElement, inputErrorClass);\r\n        } else {\r\n            //show error message\r\n            this._showErrorMessage(inputElement, inputErrorClass);\r\n        }\r\n    }\r\n\r\n    //Function to change state of Save/Create buttons on form\r\n    _toggleButtonState(formElement, inputSelector) {\r\n        const inputs = [...formElement.querySelectorAll(inputSelector)];\r\n        const isValid = inputs.every(input => input.validity.valid);\r\n        const buttonElement = this._form.querySelector(this._submitButtonSelector);\r\n\r\n        if(isValid) {\r\n            buttonElement.classList.remove(this._inactiveButtonClass);\r\n            buttonElement.disabled = false;\r\n        } else {\r\n            buttonElement.classList.add(this._inactiveButtonClass);\r\n            buttonElement.disabled = true;\r\n        }\r\n    }\r\n\r\n  //event listeners set for card arrays\r\n    _setEventListeners() {\r\n        const inputs = Array.from(this._form.querySelectorAll(this._inputSelector));\r\n       //const buttonElement = this._form.querySelector(this._submitButtonSelector);\r\n        \r\n        inputs.forEach(inputElement => {\r\n            inputElement.addEventListener(\"input\", () => {\r\n                //check Input Validity\r\n                this._checkInputValidity(inputElement, this._inputErrorClass);\r\n                //toggle button state\r\n                this._toggleButtonState(this._form, this._inputSelector);\r\n                });\r\n           });\r\n        };\r\n\r\n  //enable validation of form submit buttons\r\n   enableValidation () {\r\n    this._form.addEventListener('submit', (e) => {\r\n       e.preventDefault();\r\n       });\r\n       \r\n    this._setEventListeners();    \r\n   };\r\n};","export default class Section {\r\n    constructor({items, renderer}, cssSelector) {\r\n        this._items = items;\r\n        this._renderer = renderer;\r\n        this._cssSelector = cssSelector;\r\n    }\r\n\r\n    renderer(){\r\n        this._items.forEach(item => {\r\n            this._renderer(item)\r\n        });\r\n//This is the original code used to render cards in index.js (before Section class creation)\r\n        // function initiateCardModule(cardInfo, insert){\r\n        //     const cardObject = new Card(cardInfo, cardTemplate);\r\n        //     const card = cardObject.createCard();\r\n        //     list[insert](card);\r\n        //   }\r\n          \r\n        //   for(const initialCard of initialCards) initiateCardModule(initialCard, \"append\");\r\n    }\r\n\r\n    addItems(){\r\n\r\n    }\r\n}","const addModal = document.querySelector('.popup_type_add-card');\r\nconst addForm = addModal.querySelector('.add-form');\r\n\r\n//Toggle Functions \r\n//Button Popup Toggle Function \r\nfunction toggleModal(modal){ \r\n    modal.classList.toggle('popup_open'); \r\n  }  \r\n  \r\n  //Open Modal Function\r\n  function openModal(modal){\r\n     toggleModal(modal);\r\n     window.addEventListener('keydown', escKeyClose);\r\n     modal.addEventListener('click', closePopup);\r\n   }\r\n  \r\n  //Close Function\r\n  function closePopup(e){\r\n    if(e.target === this || e.target === this.querySelector('.popup__close-button')) {\r\n      closeModal(this);\r\n      addForm.reset();\r\n    } \r\n  }\r\n  \r\n  //Escape key close functionality\r\n  function escKeyClose(e){\r\n    if(e.key === 'Escape'){\r\n      closeModal(document.querySelector('.popup_open'));\r\n      addForm.reset();\r\n    }\r\n  }\r\n  \r\n  function closeModal(modal){\r\n    toggleModal(modal);\r\n    window.removeEventListener('keydown', escKeyClose);\r\n    modal.removeEventListener('click', closePopup);\r\n  }\r\n\r\n\r\n  \r\n  export {openModal, closeModal};","import {openModal} from \"../utils/utils.js\";\r\n\r\nconst imagePopup = document.querySelector('.popup_type_image');\r\nconst popupPic = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\n\r\nexport default class Card {\r\n    constructor (data, template){\r\n        this._link = data.link;\r\n        this._name = data.name;\r\n        this._template = template;\r\n    }\r\n\r\n    _getCardTemplate (){\r\n        return this._template.cloneNode(true);\r\n    }\r\n\r\n    _imageModal() { \r\n      popupPic.setAttribute('src', this._link); \r\n      popupPic.setAttribute('alt', this._name); \r\n      popupCaption.textContent = this._name; \r\n    } \r\n\r\n    _cardImageSelector(){\r\n        this._imageModal();\r\n        openModal(imagePopup);\r\n    }\r\n\r\n    _cardTrashSelector(e){\r\n        e.target.closest('.elements__element').remove(); \r\n    }\r\n\r\n    _cardLikeSelector(e){\r\n        e.target.classList.toggle('elements__favorite_selected'); \r\n    }\r\n\r\n    _setEventListeners() {\r\n        this._cardLike.addEventListener(\"click\", this._cardLikeSelector);\r\n        this._cardTrash.addEventListener(\"click\", this._cardTrashSelector);\r\n        this._cardImage.addEventListener(\"click\", this._cardImageSelector.bind(this));\r\n    }\r\n\r\n    createCard() { \r\n        this._cardElement = this._getCardTemplate();\r\n        const cardImage = this._cardElement.querySelector('.elements__element-pic');\r\n        const cardTitle = this._cardElement.querySelector('.elements__caption'); \r\n        this._cardImage = this._cardElement.querySelector('.elements__element-pic'); \r\n        this._cardLike = this._cardElement.querySelector('.elements__favorite'); \r\n        this._cardTrash = this._cardElement.querySelector('.elements__trash');\r\n            \r\n        cardTitle.textContent = this._name; \r\n        cardImage.setAttribute('src', this._link); \r\n        cardImage.setAttribute('alt', this._name); \r\n\r\n        this._setEventListeners();\r\n\r\n        return this._cardElement;\r\n    }\r\n}; ","import \"./index.css\";\r\nimport FormValidator from \"../components/FormValidator.js\";\r\nimport Section from \"../components/Section.js\";\r\nimport Card from \"../components/Card.js\";\r\nimport initialCards from \"../utils/initialCards.js\";\r\nimport {openModal, closeModal} from \"../utils/utils.js\";\r\n\r\n\r\nconst defaultConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__save\",\r\n  inactiveButtonClass: \"popup__save_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\n//Modals \r\nconst editModal= document.querySelector('.popup_type_edit'); \r\nconst addModal = document.querySelector('.popup_type_add-card'); \r\nconst editForm = editModal.querySelector('.edit-form'); \r\nconst addForm = addModal.querySelector('.add-form'); \r\nconst imagePopup = document.querySelector('.popup_type_image'); \r\nconst cardTemplate = document.querySelector('.card__template').content;\r\nconst list = document.querySelector('.elements'); \r\n\r\n//call form validator class\r\nconst editFormValidator = new FormValidator(defaultConfig, editForm);\r\nconst addFormValidator = new FormValidator(defaultConfig, addForm);\r\n\r\neditFormValidator.enableValidation();\r\naddFormValidator.enableValidation();\r\n\r\n//initiate new Card modal \r\n// function initiateCardModule(cardInfo, insert){\r\n//   const cardObject = new Card(cardInfo, cardTemplate);\r\n//   const card = cardObject.createCard();\r\n//   list[insert](card);\r\n// }\r\n\r\n// for(const initialCard of initialCards) initiateCardModule(initialCard, \"append\");\r\n\r\n\r\n//call Section\r\nnew Section(\r\n  {items: initialCards,\r\n  renderer: (cardInfo) => new Card({\r\n      data: cardInfo,\r\n      template: cardTemplate\r\n    }).createCard()\r\n  }\r\n  , list).renderer();\r\n\r\n\r\n//Buttons and other DOM elements \r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst addButton = document.querySelector('.profile__add-button');\r\nconst createButton = addModal.querySelector('.popup__save');\r\nconst nameInput = document.querySelector('.popup__input_type_name'); \r\nconst jobInput = document.querySelector('.popup__input_type_job'); \r\nconst profileName = document.querySelector('.profile__info-title'); \r\nconst profileJob = document.querySelector('.profile__info-subtitle');  \r\nconst titleInput = addForm.querySelector('.popup__input_type_title'); \r\nconst linkInput = addForm.querySelector('.popup__input_type_link'); \r\n\r\n\r\n//Modal Open Functions\r\n//Edit Modal Open Function\r\nfunction editButtonOpen(){\r\n  //update fields on main page \r\n  profileName.textContent = nameInput.value; \r\n  profileJob.textContent = jobInput.value;\r\n  //open modal\r\n  openModal(editModal);\r\n}\r\n//Image Modal Open Function\r\nfunction imagePopupOpen(){\r\n  imageModal(card.link, card.name); \r\n  openModal(imagePopup);\r\n}\r\n\r\n//event listeners for click of modal open buttons\r\naddButton.addEventListener('click', (e) => {\r\n  createButton.classList.add('popup__save_disabled');\r\n  createButton.disabled = true;\r\n  openModal(addModal);\r\n});\r\n\r\neditButton.addEventListener('click',(e) => openModal(editModal));\r\n\r\n//Edit Form Submit/Save Button Functionality\r\neditForm.addEventListener('submit', (e) => {\r\n  e.preventDefault();\r\n  profileName.textContent = nameInput.value; \r\n  profileJob.textContent = jobInput.value;\r\n  closeModal(editModal);\r\n});\r\n//Add Form Submit/Save Button Functionality\r\naddForm.addEventListener('submit', (e)  => { \r\n  e.preventDefault(); \r\n  //create card: \r\n  const newCard = {name: titleInput.value, link: linkInput.value};\r\n  initiateCardModule(newCard, \"prepend\");\r\n\r\n  //close modal after submit \r\n  closeModal(addModal); \r\n  addForm.reset(); \r\n  }); \r\n","//Cards to be loaded to browser upon opening\r\nconst initialCards = [\r\n    {\r\n      name: \"Yosemite Valley\",\r\n      link: \"https://code.s3.yandex.net/web-code/yosemite.jpg\"\r\n    },\r\n    {\r\n      name: \"Lake Louise\",\r\n      link: \"https://code.s3.yandex.net/web-code/lake-louise.jpg\"\r\n    },\r\n    {\r\n      name: \"Bald Mountains\",\r\n      link: \"https://code.s3.yandex.net/web-code/bald-mountains.jpg\"\r\n    },\r\n    {\r\n      name: \"Latemar\",\r\n      link: \"https://code.s3.yandex.net/web-code/latemar.jpg\"\r\n    },\r\n    {\r\n      name: \"Vanoise National Park\",\r\n      link: \"https://code.s3.yandex.net/web-code/vanoise.jpg\"\r\n    },\r\n    {\r\n      name: \"Lago di Braies\",\r\n      link: \"https://code.s3.yandex.net/web-code/lago.jpg\"\r\n    }\r\n  ]; \r\n\r\n  export default initialCards;\r\n"],"sourceRoot":""}